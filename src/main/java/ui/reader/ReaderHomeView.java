/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.reader;

import javax.swing.JOptionPane;
import ui.main.MainFrame;
//editan buat create
import models.Book;
import java.util.List;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import models.BookStore;
import models.Reader;
import services.DatabaseService;
import utils.TablePopulator;

/**
 *
 * @author Dukhaan
 */
public class ReaderHomeView extends javax.swing.JPanel implements TablePopulator {

    /**
     * Creates new form ReaderHomeView1
     */
    private MainFrame mainFrame;
    private Reader currentReader;

    public ReaderHomeView(MainFrame mainFrame) {
        initComponents();
        this.mainFrame = mainFrame;
        populateTable();
        currentReader = (Reader) DatabaseService.getCurrentUser();

    }

    @Override
    public void populateTable() {
        System.out.println("Populating table...");
        // Get the book list
        List<Book> bookList = this.mainFrame.getStore().getBooks();

        // Populate the table with book data
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
        for (Book book : bookList) {
            Object[] rowData = {
                book.getTitle(),
                book.getAuthor(),
                book.getPrice(),
                "Action" // You might want to replace this with appropriate action
            };
            model.addRow(rowData);
        }
    }

    private Book getBookFromRow(int row) {
        DefaultTableModel model = (DefaultTableModel) bookTable.getModel();
        String selectedTitle = (String) model.getValueAt(row, 0); // Assuming title is in the first column
        // Get the store
        BookStore store = mainFrame.getStore();

        // Get the books in the store
        List<Book> allBooks = store.getBooks();

        // search for the book
        for (Book book : allBooks) {
            if (book.getTitle().equals(selectedTitle)) {
                return book; // Found the matching book
            }
        }

        return null; // Book not found
    }

    private void handleAddToLibrary(Reader currentReader, Book selectedBook) {
        if (currentReader.isBookInLibrary(selectedBook)) {
            // Book is already in the library, show a message or take appropriate action
            JOptionPane.showMessageDialog(this, "Buku sudah ada di perpustakaan Anda.", "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Add book to library/purchase book -> deduct balance if the book is not free
            // Then set isBookPurchased to true then update the button text
            if (selectedBook.getPrice() > 0) {
                // If balance < price -> error message
                String bookPrice = Double.toString(selectedBook.getPrice());
                int confirm = JOptionPane.showConfirmDialog(this, "Beli buku seharga " + bookPrice + " ?", "Konfirmasi Pembelian", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    if (currentReader.getBalance() >= selectedBook.getPrice()) {
                        currentReader.deductBalance(selectedBook.getPrice());
                        currentReader.addBookToLibrary(selectedBook);
                        bookTable.clearSelection();
                        JOptionPane.showMessageDialog(this, "Berhasil Menambahkan buku ke Library!");
                        // If the purchased book is in the wishlist, remove it from the wishlist
                        if (currentReader.isBookInWishlist(selectedBook)) {
                            currentReader.removeFromWishlist(selectedBook);
                        }
                    } else {
                        // Insufficient balance
                        JOptionPane.showMessageDialog(this, "Saldo Anda tidak mencukupi.", "Saldo Kurang", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                // buku gratis, langsung disimpan
                currentReader.addBookToLibrary(selectedBook);
                bookTable.clearSelection();
                JOptionPane.showMessageDialog(this, "Berhasil Menambahkan buku ke Library!");
                // klo bukunya ada di wishlist, dihapus dari wishlist
                if (currentReader.isBookInWishlist(selectedBook)) {
                    currentReader.removeFromWishlist(selectedBook);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTable = new javax.swing.JTable();
        btnAddWishlist = new javax.swing.JButton();
        btnAddToLibrary = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblHome = new javax.swing.JLabel();
        lblWishlist = new javax.swing.JLabel();
        lblLibrary = new javax.swing.JLabel();
        lblProfile = new javax.swing.JLabel();
        lblLogout = new javax.swing.JLabel();

        jLabel3.setFont(new java.awt.Font("Sora", 1, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(223, 224, 224));
        jLabel3.setText("Home");

        bookTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookTable.setFont(new java.awt.Font("Sora", 1, 10)); // NOI18N
        bookTable.setForeground(new java.awt.Color(255, 255, 255));
        bookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title", "Author", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);

        // Atur render untuk setiap kolom pada tabel
        for(int i = 0; i < bookTable.getColumnCount(); i++) {
            bookTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        bookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTable);

        btnAddWishlist.setBackground(new java.awt.Color(245, 83, 112));
        btnAddWishlist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vector.png"))); // NOI18N
        btnAddWishlist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddWishlistActionPerformed(evt);
            }
        });

        btnAddToLibrary.setBackground(new java.awt.Color(64, 206, 206));
        btnAddToLibrary.setFont(new java.awt.Font("Sora", 0, 10)); // NOI18N
        btnAddToLibrary.setForeground(new java.awt.Color(37, 42, 51));
        btnAddToLibrary.setText("Add to Library");
        btnAddToLibrary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToLibraryActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(37, 42, 51));
        jPanel1.setPreferredSize(new java.awt.Dimension(112, 426));

        lblHome.setFont(new java.awt.Font("Sora", 1, 12)); // NOI18N
        lblHome.setForeground(new java.awt.Color(223, 224, 224));
        lblHome.setText("Home");

        lblWishlist.setFont(new java.awt.Font("Sora", 1, 12)); // NOI18N
        lblWishlist.setForeground(new java.awt.Color(223, 224, 224));
        lblWishlist.setText("Wishlist");
        lblWishlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblWishlistMouseClicked(evt);
            }
        });

        lblLibrary.setFont(new java.awt.Font("Sora", 1, 12)); // NOI18N
        lblLibrary.setForeground(new java.awt.Color(223, 224, 224));
        lblLibrary.setText("Library");
        lblLibrary.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLibraryMouseClicked(evt);
            }
        });

        lblProfile.setFont(new java.awt.Font("Sora", 1, 12)); // NOI18N
        lblProfile.setForeground(new java.awt.Color(223, 224, 224));
        lblProfile.setText("Profile");
        lblProfile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblProfileMouseClicked(evt);
            }
        });

        lblLogout.setFont(new java.awt.Font("Sora", 1, 12)); // NOI18N
        lblLogout.setForeground(new java.awt.Color(245, 83, 112));
        lblLogout.setText("Logout");
        lblLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogout)
                    .addComponent(lblLibrary)
                    .addComponent(lblHome)
                    .addComponent(lblProfile)
                    .addComponent(lblWishlist, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(lblHome, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblWishlist, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLibrary, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblProfile, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addGap(191, 191, 191)
                .addComponent(lblLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnAddWishlist, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAddToLibrary))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddToLibrary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddWishlist, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddToLibraryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToLibraryActionPerformed
        // TODO add your handling code here:
        javax.swing.JTable selectedTable = bookTable;
        int selectedRow = selectedTable.getSelectedRow();

        if (selectedRow != -1) { // Ensure a row is selected
            Book selectedBook = getBookFromRow(selectedRow);
            handleAddToLibrary(currentReader, selectedBook);
        } else {
            JOptionPane.showMessageDialog(this, "Pilih satu baris dalam tabel terlebih dahulu.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddToLibraryActionPerformed

    private void lblWishlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblWishlistMouseClicked
        mainFrame.showView(new WishlistView(mainFrame));
    }//GEN-LAST:event_lblWishlistMouseClicked

    private void lblLibraryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLibraryMouseClicked
        mainFrame.showView(new LibraryView(mainFrame));
    }//GEN-LAST:event_lblLibraryMouseClicked

    private void lblProfileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblProfileMouseClicked
        mainFrame.showView(new ReaderProfileView(mainFrame));
    }//GEN-LAST:event_lblProfileMouseClicked

    private void lblLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoutMouseClicked
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin logout?", "Konfirmasi Logout", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Logout
            mainFrame.showView(mainFrame.getLoginView());
        }
    }//GEN-LAST:event_lblLogoutMouseClicked

    private void btnAddWishlistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddWishlistActionPerformed
        // add book to wishlist
        javax.swing.JTable selectedTable = bookTable; // Replace jTable1 with the actual name of your JTable
        int selectedRow = selectedTable.getSelectedRow();

        if (selectedRow != -1) { // Ensure a row is selected
            Book selectedBook = getBookFromRow(selectedRow);
            currentReader.addBookToWishlist(selectedBook);
            bookTable.clearSelection();
            JOptionPane.showMessageDialog(this, "Berhasil Menambahkan buku ke Wishlist!");
        } else {
            JOptionPane.showMessageDialog(this, "Pilih satu baris dalam tabel terlebih dahulu.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddWishlistActionPerformed

    private void bookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTableMouseClicked
        javax.swing.JTable selected = (javax.swing.JTable) evt.getSource();
        int row = selected.getSelectedRow();
        Book selectedBook = getBookFromRow(row);
        // when double clicked, open teh detail view
        if (evt.getClickCount() == 2) {
            // buka detailview
            mainFrame.showView(new DetailView(mainFrame, selectedBook));
        } else {
            // select row, kalau bukunya udah di library, nggak bisa di add to wishlist
            if (currentReader.isBookInLibrary(selectedBook) || currentReader.isBookInWishlist(selectedBook)) {
                btnAddWishlist.setEnabled(false);
            } else {
                btnAddWishlist.setEnabled(true);
            }
        }
    }//GEN-LAST:event_bookTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookTable;
    private javax.swing.JButton btnAddToLibrary;
    private javax.swing.JButton btnAddWishlist;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHome;
    private javax.swing.JLabel lblLibrary;
    private javax.swing.JLabel lblLogout;
    private javax.swing.JLabel lblProfile;
    private javax.swing.JLabel lblWishlist;
    // End of variables declaration//GEN-END:variables
}
